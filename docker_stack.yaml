version: '3.1'

networks:
  backend:
    driver: overlay

services:

  rest:
    hostname: weskit
    image: ${WESKIT_IMAGE}
    secrets:
      - weskit.key
      - weskit.crt
    environment:
      WESKIT_CONFIG: /home/weskit/config.yaml
      WESKIT_LOG_CONFIG:
      WESKIT_VALIDATION_CONFIG:
      WESKIT_DATABASE_URL: mongodb://database:27017
      WESKIT_DATA: /weskit_data
      RESULT_BACKEND: redis://result_broker:6379
      BROKER_URL: redis://result_broker:6379
      FLASK_APP: weskit
    volumes:
      - ${WESKIT_DATA}:/weskit_data
      - ${WESKIT_CONFIG}:/home/weskit/config.yaml:ro
      - ${SHARED_FILESYSTEM_ROOT}:/data
    networks:
      - backend
    working_dir: /weskit
    entrypoint: ["bash", "-i", "-c"]
    command: ["conda activate weskit && pip install ./ && ln -s /run/secrets/weskit.* /weskit/uWSGI_Server/certs/  && uwsgi --ini /weskit/uWSGI_Server/uwsgi.ini"]
    ports:
      - 5000:5000

  database:
    image: mongo:4.2.3
    volumes:
      - ${SHARED_FILESYSTEM_ROOT}:/var/lib/mongodb
    networks:
      - backend
    ports:
      - 27017:27017

  result_broker:
    image: redis:6.0.1-alpine
    volumes:
      - ${REDIS_CONFIG}:/usr/local/etc/redis/redis.conf:ro
      - ${SHARED_FILESYSTEM_ROOT}:/data
    networks:
      - backend
    ports:
      - 6379:6379

  # Workers are probably better started more dynamically, e.g. in LSF cluster, Docker swarm or Kubernetes.
  worker1:
    image: ${WESKIT_IMAGE}
    environment:
      RESULT_BACKEND: redis://result_broker:6379
      BROKER_URL: redis://result_broker:6379
    working_dir: /weskit
    entrypoint: ["bash", "-i", "-c"]
    command: ["conda activate weskit; celery worker --loglevel DEBUG --concurrency 1 --app weskit.tasks.celery_worker.celery_app"]
    volumes:
      - ${WESKIT_DATA}:/weskit_data
      - ${SHARED_FILESYSTEM_ROOT}:/data
    networks:
      - backend

secrets:
  weskit.key:
    file: uWSGI_Server/certs/weskit.key
  weskit.crt:
    file: uWSGI_Server/certs/weskit.crt
