version: '3.9'


networks:
  backend:
    driver: overlay
    driver_opts:
      encrypted: "false"
  oauth:
    driver: overlay

volumes:
  mongodb-configdb:
  mongodb-data:
  redis-data:


services:

  rest:
    image: ${WESKIT_IMAGE}
    secrets:
      - weskit.key
      - weskit.crt
      - keycloak.pem

    depends_on:
      - database
      - result_broker
      - keycloak

    environment:
      WESKIT_CONFIG: /home/weskit/config.yaml
      WESKIT_LOG_CONFIG: /home/weskit/log-config.yaml
      WESKIT_VALIDATION_CONFIG:
      WESKIT_DATABASE_URL: mongodb://database:${MONGODB_PORT:-27017}
      WESKIT_DATA: /data
      WESKIT_WORKFLOWS: /workflows
      RESULT_BACKEND: redis://result_broker:${REDIS_PORT:-6379}
      BROKER_URL: redis://result_broker:${REDIS_PORT:-6379}
      OIDC_ISSUER_URL: https://keycloak:8443/auth/realms/WESkit
      OIDC_CLIENT_SECRET: ${WESKIT_CLIENT_SECRET} #example from keyclaok.sql file: export WESKIT_CLIENT_SECRET=a8086bcc-44f3-40f9-9e15-fd5c3c98ab24
      OIDC_REALM: WESkit
      OIDC_CLIENTID: WESkit

      REQUESTS_CA_BUNDLE: /run/secrets/keycloak.pem
    volumes:
      - ${WESKIT_WORKFLOWS}:/workflows:ro
      - ${WESKIT_CONFIG}:/home/weskit/config.yaml:ro
      - ${WESKIT_LOG_CONFIG}:/home/weskit/log-config.yaml:ro
      - ${WESKIT_DATA}:/data
      - ./users.yaml:/weskit/users.yaml:ro
      - ./weskit:/weskit/weskit:ro

    networks:
      - backend
      - oauth
    working_dir: /weskit
    entrypoint: ["bash", "-i", "-c"]
    command: [ "conda activate weskit && pip install ./ && ln -s /run/secrets/weskit.* /weskit/uWSGI_Server/certs/  && uwsgi --ini /weskit/uWSGI_Server/uwsgi.ini" ]
    ports:
      - "${WESKIT_PORT:-5000}:5000"
    # healthcheck:
    #   test: ["CMD-SHELL", "(curl -f http://localhost:5000/gh4gh/wes/v1/service-info | grep '\"environment\": \"development\"') && echo 'OK'"]
    #   interval: 10s
    #   timeout: 2s
    #   retries: 3

  database:
    image: mongo:4.2.3
    volumes:
      - mongodb-data:/data/db
      - mongodb-configdb:/data/configdb
    networks:
      - backend
    ports:
      - "${MONGODB_PORT:-27017}:27017"
    deploy:
      # Deploy on the manager only, because the data volume is local on that machine
      placement:
        constraints: [node.role == manager]

  result_broker:
    image: redis:6.0.1-alpine
    volumes:
      - ${REDIS_CONFIG}:/usr/local/etc/redis/redis.conf:ro
      # Used for persistence of the broker data.
      - redis-data:/data
    networks:
      - backend
    ports:
      - "${REDIS_PORT:-6379}:6379"
    deploy:
      # Deploy on the manager only, because the data volume is local on that machine
      placement:
        constraints: [node.role == manager]

  worker:
    image: ${WESKIT_IMAGE}
    depends_on:
      - result_broker
    environment:
      RESULT_BACKEND: redis://result_broker:${REDIS_PORT:-6379}
      BROKER_URL: redis://result_broker:${REDIS_PORT:-6379}
      WESKIT_WORKFLOWS: /workflows
    working_dir: /weskit
    entrypoint: ["bash", "-i", "-c"]
    command: ["conda activate weskit && celery --app weskit.tasks.celery_worker.celery_app worker --loglevel DEBUG --concurrency 1 -l info"]
    volumes:
      - ${WESKIT_DATA}:/data
      - ${WESKIT_WORKFLOWS}:/workflows:ro
      - ./weskit:/weskit/weskit:ro
    networks:
      - backend
    deploy:
      mode: replicated
      replicas: 1
#      placement:
#        # Limit the number of replicas. Probably the memory consumption is limiting.
#        max_replicas_per_node: 32


  ## Login System

  keycloak:
    image: quay.io/keycloak/keycloak:12.0.2
    depends_on:
      - keycloak-database
    environment:
      KEYCLOAK_USER: ${KEYCLOAK_USER:-admin}
      KEYCLOAK_PASSWORD: ${KEYCLOAK_PASSWORD:-admin}
      DB_USER: ${KEYCLOAK_DB_USER:-keycloak}
      DB_PASSWORD: ${KEYCLOAK_DB_PASSWORD:-unsecret_password}
      KEYCLOAK_FRONTEND_URL: ${KEYCLOAK_FRONTEND_URL:-https://localhost:8443/auth}
      DB_VENDOR: mysql
      DB_PORT: 3306
      DB_ADDR: keycloak-database

    working_dir: /weskit

    networks:
      - oauth
    ports:
      - 8443:8443
    secrets:
      - source: keycloak.key
        target: /etc/x509/https/tls.key
      - source: keycloak.crt
        target: /etc/x509/https/tls.crt
      
  # keycloak database
  keycloak-database:
    image: mysql

    environment:
       MYSQL_DATABASE: keycloak
       MYSQL_USER: ${KEYCLOAK_DB_USER:-keycloak}
       MYSQL_PASSWORD: ${KEYCLOAK_DB_PASSWORD:-unsecret_password}
       MYSQL_ROOT_PASSWORD: ${KEYCLOAK_DB_ROOT_PASSWORD:-unsecret_root_password}
    volumes:
      - ./config/keycloak_schema.sql:/docker-entrypoint-initdb.d/test.sql
    networks:
      - oauth


secrets:
  weskit.key:
    file: uWSGI_Server/certs/weskit.key
  weskit.crt:
    file: uWSGI_Server/certs/weskit.crt
  keycloak.key:
    file: uWSGI_Server/certs/weskit.key
  keycloak.crt:
    file: uWSGI_Server/certs/weskit.crt
  keycloak.pem:
    file: uWSGI_Server/certs/weskit.pem
