version: '3'

networks:
  backend:
    driver: overlay
  frontend:
    driver: overlay

services:

  rest:
    hostname: wesnake
    image: ${WESNAKE_IMAGE}
    build: .
    restart: unless-stopped
    environment:
      HOME: /home/wesnake
      WESNAKE_CONFIG: /home/wesnake/config.yaml
      WESNAKE_LOG_CONFIG:
      WESNAKE_VALIDATION_CONFIG:
    depends_on:
      - database
      - result_broker
      - message_queue
      - worker1
    volumes:
      - ${WESNAKE_DEVEL_ROOT}:/wesnake-devel
      - ${WESNAKE_CONFIG}:/home/wesnake/config.yaml:ro
      - ${SHARED_FILESYSTEM_ROOT}:/shared
    networks:
      - backend
    user: "${WESNAKE_UID}:${WESNAKE_GID}"
    working_dir: /wesnake-devel
    entrypoint: ["bash", "-i", "-c"]
    command: ["conda activate wesnake && pip install ./ && wesnake"]
    ports:
      - 4080:4080

  database:
    image: mongo:4.2.3
    restart: unless-stopped
    volumes:
      - ${SHARED_FILESYSTEM_ROOT}:/var/lib/mongodb
    networks:
      - backend
    ports:
      - 27017:27017

  result_broker:
    image: redis:6.0.1-alpine
    restart: unless-stopped
    volumes:
      - ${REDIS_CONFIG}:/usr/local/etc/redis/redis.conf:ro
      - ${SHARED_FILESYSTEM_ROOT}:/data
    networks:
      - backend
    ports:
      - 6379:6379

  # Workers are probably better started more dynamically, e.g. in LSF cluster, Docker swarm or Kubernetes.
  worker1:
    image: ${WESNAKE_IMAGE}
    depends_on:
      - result_broker
      - message_queue
    environment:
      HOME: /home/wesnake
      RESULT_BACKEND: redis://result_broker:6379
      BROKER_URL: redis://result_broker:6379
    user: "${WESNAKE_UID}:${WESNAKE_GID}"
    working_dir: /wesnake-devel
    entrypoint: ["bash", "-i", "-c"]
    command: ["conda activate wesnake; celery worker --loglevel DEBUG --concurrency 1 --app ga4gh.wes.celery_worker.celery_app"]
    restart: unless-stopped
    build: .
    volumes:
      - ${WESNAKE_DEVEL_ROOT}:/wesnake-devel
      - ${SHARED_FILESYSTEM_ROOT}:/shared
    networks:
      - backend

