from flask import jsonify, request, Blueprint, redirect
from flask_jwt_extended import (
    set_access_cookies,
    set_refresh_cookies,
    unset_jwt_cookies
)

from flask import current_app as app
import requests
import urllib
import json
import time
from base64 import b64decode

login = Blueprint('login', __name__, template_folder='templates')


###########################################################
#  Login / Logout / Tokenrenew / Oauth Callback Endpoint..#
###########################################################


@login.route('/login', methods=['GET'])
def loginFct():
    url = app.OIDC_Login.oidc_config['authorization_endpoint']
    params = (
        "?client_id=%s&"
        "redirect_uri=%s&"
        "scope=openid+email+profile&"
        "access_type=offline&"
        "response_type=code&"
        "openid.realm=%s") % (
        app.config["OIDC_CLIENTID"],
        urllib.parse.quote(
            app.config["OIDC_FLASKHOST"] + '/login/callback', safe=''
        ),
        app.config["OIDC_REALM"])

    return redirect(url+params, code=302)


@login.route('/login/callback', methods=['GET'])
def callbackFunction():
    """
    The ODIC authenticator redirects to this endpoint after login success.
    """

    try:
        # Payload
        payload = {
            "grant_type": "authorization_code",
            "code": request.args.get("code"),
            "redirect_uri": "%s/login/callback" %
            (app.config["OIDC_FLASKHOST"]),
            "client_id": app.config["OIDC_CLIENTID"],
            "client_secret": app.config['JWT_SECRET_KEY']
            }

        # Make request
        j = requests.post(
            data=payload,
            url=app.OIDC_Login.oidc_config["token_endpoint"]
        ).json()

        print(j)
        # obtain access_token and refresh token from response
        at = j.get('access_token', None)
        rt = j.get('refresh_token', None)
        ate = j.get('expires_in', None)
        rte = j.get("refresh_expires_in", None)
        if at and rt:
            # Set Cookie and Return
            resp = jsonify({'login': True})
            set_access_cookies(resp, at, ate)
            set_refresh_cookies(resp, rt, rte)
            return(resp, 200)

        else:
            resp = jsonify({'login': False})
            return(resp, 401)
    except Exception as e:
        app.OIDC_Login.logger.exception("Login Process Failed")
        app.OIDC_Login.logger.exception(e)
        return(jsonify(
            {'refresh': False, 'msg': 'Login Process Failed'}
        ), 401)


@login.route('/login/logout', methods=['GET'])
def logoutFct():
    """
    This deletes the token cookies and removes the SSO session generated by
    the OIDC provider.
    """
    # ODIC host will return to this point after logout
    comebackURL = app.config["OIDC_FLASKHOST"] + "/"

    url = app.OIDC_Login.oidc_config['end_session_endpoint']
    params = "?redirect_uri=%s" % (
        urllib.parse.quote(comebackURL, safe=''))

    # Initiate redirect
    oidc_logout = redirect(url+params, code=302)
    # Delete Token Cookies
    unset_jwt_cookies(oidc_logout)
    return (oidc_logout)


@login.route("/login/refresh", methods=['GET'])
def refesh_access_token():
    """
    This route updates the refresh token and the access token.
    """

    # Obtain the refresh cookie token name used by jwt_extended
    refreshCookieName = app.config["JWT_REFRESH_COOKIE_NAME"]

    # Check for exisiting refresh cookie return error if not is present
    if refreshCookieName not in request.cookies:
        return jsonify(
            {'refresh': False, "msg": "Refresh Token Missing!"}
        ), 401

    # Check for exisiting refresh cookie return error if not is present
    if not refresh_token_timeOK(request.cookies['refreshCookieName']):
        return jsonify(
            {'refresh': False, "msg": "Refresh Token Expired!"}
        ), 401

    # Prepare Header and Payload for the OIDC request
    header = {"Content-Type:" "application/x-www-form-urlencoded"}
    payload = {
            "grant_type": "refresh_token",
            "refresh_token": request.cookies['refreshCookieName'],
            "client_id": app.config["OIDC_CLIENTID"],
            "client_secret": app.config['JWT_SECRET_KEY']
            }

    # Get an responce from OIDC authenticator
    try:
        j = requests.post(
            data=payload,
            header=header,
            url=app.OIDC_Login.oidc_config["token_endpoint"]
        ).json()
    except Exception as e:
        app.OIDC_Login.logger.warning("Could not reach OIDC Server:", e)
        return(
            jsonify({'refresh': False, 'msg': 'Could not reach OIDC Server'}),
            401
        )

    # In case of an invalid session or user logout return error
    if 'error' in j:
        j['refresh'] = False
        return(jsonify(j), 401)

    # Try to extract access_token and refresh_token from response
    at = j.get('access_token', None)
    rt = j.get('refresh_token', None)
    ate = j.get('expires_in', None)
    rte = j.get("refresh_expires_in", None)

    # If response was successfull provide updated access_token and
    # updated refresh_token
    if at and rt:
        resp = jsonify({'refresh': True})
        set_access_cookies(resp, at, ate)
        set_refresh_cookies(resp, rt, rte)
        return(resp, 200)

    # In case of an unkown response return an unexpected error
    return jsonify({'refresh': False, "msg": 'unexpected error'}), 401


def refresh_token_timeOK(token):
    """
    This funktion extracts the got an refresh_token and tries
    to obtain it's expiration date. If it is passed this function
    will return False and True if the refresh token is still valid.
    """
    try:
        a = token.split('.')
        if len(a) == 3:
            return(json.loads(b64decode(a[1]+"==="))['exp'] >= time.time())
    except Exception as e:
        app.OIDC_Login.logger.info("Got Invalid Refresh Token!", e)
        return(False)
